# docker-compose.yml
version: '3'

services:

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8
    container_name: namenode
    volumes:
      - /docker_shared_folder/hdfs/namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./docker_shared_folder/hadoop-hive.env
    ports:
      - "50070:50070"
    networks:
      coder_net:
        ipv4_address: 172.27.1.2
  
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
    container_name: datanode
    volumes:
      - /docker_shared_folder/hdfs/datanode:/hadoop/dfs/data
      # - ./bank:/bank
    env_file:
      - ./docker_shared_folder/hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    depends_on:
      - namenode
    ports:
      - "50075:50075"
    networks:
      coder_net:
        ipv4_address: 172.27.1.3
  
  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql
    depends_on:
      - datanode
    ports:
      - "5432:5432"
    networks:
      net_pet:
        ipv4_address: 172.27.1.4
  
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    env_file:
      - ./hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:50070 datanode:50075 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
    depends_on:
      - hive-metastore-postgresql
    networks:
      net_pet:
        ipv4_address: 172.27.1.5
  
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    env_file:
      - ./docker_shared_folder/hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"
    depends_on:
      - hive-metastore
    networks:
      coder_net:
        ipv4_address: 172.27.1.10

#   spark-master:
#     image: bde2020/spark-master:2.4.0-hadoop2.7
#     container_name: spark-master
#     ports:
#       - 8080:8080
#       - 7077:7077
#     environment:
#       - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
#     env_file:
#       - ./hadoop-hive.env
#     networks:
#       net_pet:
#         ipv4_address: 172.27.1.10
     
#   spark-worker:
#     image: bde2020/spark-worker:2.4.0-hadoop2.7
#     container_name: spark-worker
#     depends_on:
#       - spark-master
#     environment:
#       - SPARK_MASTER=spark://spark-master:7077
#       - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
#       - HIVE_CORE_CONF_javax_jdo_option_ConnectionURL=jdbc:postgresql://hive-metastore/metastore
#     depends_on:
#       - spark-master
#     ports:
#       - 8081:8081
#     env_file:
#       - ./hadoop-hive.env
#     networks:
#       net_pet:
#         ipv4_address: 172.27.1.11

#   zeppelin:
#     image: apache/zeppelin:0.8.0
#     container_name: zeppelin
#     ports:
#       - 19090:8080
#     networks:
#       net_pet:
#         ipv4_address: 172.27.1.12

#   hue:
#       image: gethue/hue:20191107-135001
#       hostname: hue
#       container_name: hue
#       dns: 8.8.8.8
#       ports:
#       - "8888:8888"
#       volumes:
#         - ./hue-overrides.ini:/usr/share/hue/desktop/conf/z-hue.ini
#       depends_on:
#       - "database"
#       networks:
#         net_pet:
#           ipv4_address: 172.27.1.13
  
#   database:
#       image: mysql:5.7
#       container_name: database
#       ports:
#           - "33061:3306"
#       command: --init-file /data/application/init.sql
#       volumes:
#           - /tmp/mysql/data:/var/lib/mysql
#           - ./init.sql:/data/application/init.sql
#       environment:
#           MYSQL_ROOT_USER: hueroot
#           MYSQL_ROOT_PASSWORD: secret
#           MYSQL_DATABASE: hue
#           MYSQL_PASSWORD: secret
#           MYSQL_USER: hueroot
#       networks:
#         net_pet:
#           ipv4_address: 172.27.1.14

    # database:
    #     container_name: database
    #     # Official Postgres image from DockerHub
    #     image: 'postgres:15'
    #     # limit the memory and cpu usage
    #     mem_limit: 512m
    #     mem_reservation: 128M
    #     cpus: 0.5
    #     # mount local folder to container
    #     volumes:
    #         - ./docker_shared_folder/postgres_data:/var/lib/postgresql/data
    #     # By default, a Postgres database is running on the 5432 port.
    #     # If we want to access the database from our computer (outside the container),
    #     # we must share the port with our computer's port.
    #     # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    #     # Note: You are free to change your computer's port,
    #     # but take into consideration that it will change the way
    #     # you are connecting to your database.
    #     ports:
    #         - 10001:5432
    #     environment:
    #         - POSTGRES_DB=postgres # The PostgreSQL default database (automatically created at first launch)
    #         - POSTGRES_USER=postgres # The PostgreSQL user (useful to connect to the database)
    #         - POSTGRES_PASSWORD=postgres # The PostgreSQL password (useful to connect to the database)
    #         - POSTGRES_HOST_AUTH_METHOD=trust
    #     networks:
    #         coder_net:
    #             ipv4_address: 172.27.1.11

    # hue:
    #     image: gethue/hue:20230505-140101
    #     hostname: hue
    #     container_name: hue
    #     dns: 8.8.8.8
    #     ports:
    #         - 10002:8888
    #     volumes:
    #         - ./docker_shared_folder/hue.ini:/usr/share/hue/desktop/conf/z-hue.ini
    #     depends_on:
    #     - "database"
    #     networks:
    #         coder_net:
    #           ipv4_address: 172.27.1.12

    mongo:
      image: mongo
      restart: always
      environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: example

    mongo-express:
      image: mongo-express
      restart: always
      ports:
        - 8081:8081
      environment:
        ME_CONFIG_MONGODB_ADMINUSERNAME: root
        ME_CONFIG_MONGODB_ADMINPASSWORD: example
        ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

networks:
  coder_net: # Name of the network
    ipam: # IP Address Management
      driver: default
      config:
        - subnet: 172.27.0.0/16 # Subnet
        # 172.17.0.0 is the default subnet for docker
        # 16 is the number of bits used for the network